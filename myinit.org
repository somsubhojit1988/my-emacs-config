#+TITLE: My modularized org init
#+author: Subhojit Som
#+email: som.subhojit1988@gmail.com

* interface tweaks
  #+BEGIN_SRC emacs-lisp
  ;;;; 1st thing => turn off startup message
  (setq inhibit-startup-message t)
  ;;; acquire that little real-estate space
  ;;; from tool-bar
  (tool-bar-mode -1)
  ;; No need to type in the whole of "yes"
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; Press F5 to reload buffer
  (global-set-key (kbd "<f5>") 'revert-buffer)
  #+END_SRC
* try
  awesome package for trying out a package without actually installing it
  #+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
  #+END_SRC
* which key 
  bring up help about the key we are trying to enter in
  #+BEGIN_SRC emacs-lisp
  ;;;; Key binding helper package
  (use-package which-key
    :ensure t
    :config (which-key-mode))
  #+END_SRC
  
* Ohh that Spacemacs theme
  #+BEGIN_SRC emacs-lisp
  ;;;; Spacemacs theme download and load-theme
  (use-package spacemacs-common
    :ensure spacemacs-theme)
  ;;   :config (load-theme 'spacemacs-dark t))
  #+END_SRC

* Use cyberpunk theme for now
  #+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; For the benifit of material theme right now ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; (use-package cyberpunk-theme
  ;; :ensure cyberpunk-theme
  ;; :config (load-theme 'cyberpunk t))
  #+END_SRC

* Some org stuffs
  #+BEGIN_SRC emacs-lisp

  ;;;; Org-mode stuffs
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))

  ;;; syntax higlighting in orgmode code blocks like their native mode
  (setq org-src-fontify-natively t
	org-src-tab-acts-natively t
	org-confirm-babel-evaluate nil
	org-edit-src-content-indentation 0)


  #+END_SRC
* ido
  #+BEGIN_SRC  emacs-lisp
  ;;;; Help with the list of buffers when trying to switch
  ;;; flexible matching is fancy it gives the options without
  ;;; actually typing the whole thing
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  #+END_SRC
* ibuffer
  #+BEGIN_SRC emacs-lisp
  ;;;; Open up a different interface (in another window)
  ;;; to show the buffers we have opened - use ibuffer/
  ;;; ibuffer-other-window
  (defalias 'list-buffers 'ibuffer)
  ;;; alternatively
  ;; (defalias 'list-buffers 'ibuffer-other-window)
  #+END_SRC

* ace-window
  Switching between windows made easy by labelling them with numbers
  #+BEGIN_SRC emacs-lisp
  ;;;; installing ace-window package, it helps
  ;;; switching between multiple (> 2) opened windows
  ;;; by assigning a number to each
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
      ))
  #+END_SRC
* swiper 
  Very convennient navigation/search regex based
  #+BEGIN_SRC emacs-lisp
  ;;;; swiper
  ;;; dependency => cunsel
  (use-package counsel
    :ensure t
    )

  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
	   ("C-r" . swiper)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file)
	   ("C-c g" . counsel-git)
	   ("C-c j" . counsel-git-grep)
	   ("C-c k" . counsel-ag)
	   ("C-x l" . counsel-locate)
	   ("C-S-o" . counsel-rhythmbox))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))
  ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
  ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  #+END_SRC
* bash-completion
  
  * Wanted bash completion to work on eshell but haven't got this working so far
    TODO: need to investigate eshell
  #+BEGIN_SRC emacs-lisp

  ;;;; Want bash completion on eshell
  ;;;  will be using this : emacs-bash-completion
  ;;;  [https://github.com/szermatt/emacs-bash-completion] adding the
  ;;;  path to emacs-bash-completion to load path
  (add-to-list 'load-path "/home/susom/.emacs.d/emacs-bash-completion/")
  ;;; as per the github page -
  (autoload 'bash-completion-dynamic-complete 
    "bash-completion"
    "BASH completion hook")
  (add-hook 'shell-dynamic-complete-functions
	    'bash-completion-dynamic-complete)

  #+END_SRC

* auto-fill comment blocks in code
  #+BEGIN_SRC emacs-lisp
  ;;;; Auto fill comments only as suggested here -
  ;;;; https://www.emacswiki.org/emacs/FillingComments
  (setq comment-auto-fill-only-comments t)
  #+END_SRC

* avy 
  Charecter based navigation haven't quite explored this yet
  #+BEGIN_SRC emacs-lisp
  ;;;; Avy comes highly recommended [Navigation by char/words ... lots
  ;;;; of other stuffs]
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))

  #+END_SRC
* Window management
  resotre window layout=> C-x r w <register> to store a window
  configuration in a register, and C-x r j <register> (where
  <register> is a single character) to jump back to it.
  #+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; WINDOW MANAGEMENT: 
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;; Winner mode to the rescue “undo” (and “redo”) changes in the
  ;;; window configuration with the key commands ‘C-c left’ and ‘C-c
  ;;; right’
  (when (fboundp 'winner-mode)
    (winner-mode 1))
  #+END_SRC
* Auto complete
  #+BEGIN_SRC emacs-lisp
  ;;;; Auto complete, just what was missing
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
  #+END_SRC
* Change fonts 
  setting to inconsolata fonts can be changed to anything by setting the font string
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Inconsolata" ))
  (set-face-attribute 'default t :font "Inconsolata" ) 
  (set-frame-font "Inconsolata 11" nil t)
  #+END_SRC
* matlab mode enable
  #+BEGIN_SRC emacs-lisp
  (matlab-cedet-setup)
  #+END_SRC
* Enable Which Func mode globally
  [[https://www.emacswiki.org/emacs/WhichFuncMode][wiki link to which func]]
  #+begin_src emacs-lisp
  (which-function-mode 1)
  #+END_SRC
* Bookmarks (bm)
  [[https://github.com/joodland/bm][bm github]]
  #+BEGIN_SRC emacs-lisp
  (use-package bm
    :ensure t
    :demand t

    :init
    ;; restore on load (even before you require bm)
    (setq bm-restore-repository-on-load t)


    :config
    ;; Allow cross-buffer 'next'
    (setq bm-cycle-all-buffers t)

    ;; where to store persistant files
    (setq bm-repository-file "~/.emacs.d/bm-repository")

    ;; save bookmarks
    (setq-default bm-buffer-persistence t)

    ;; Loading the repository from file when on start up.
    (add-hook' after-init-hook 'bm-repository-load)

    ;; Restoring bookmarks when on file find.
    (add-hook 'find-file-hooks 'bm-buffer-restore)

    ;; Saving bookmarks
    (add-hook 'kill-buffer-hook #'bm-buffer-save)

    ;; Saving the repository to file when on exit.
    ;; kill-buffer-hook is not called when Emacs is killed, so we
    ;; must save all bookmarks first.
    (add-hook 'kill-emacs-hook #'(lambda nil
				   (bm-buffer-save-all)
				   (bm-repository-save)))

    ;; The `after-save-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state.
    (add-hook 'after-save-hook #'bm-buffer-save)

    ;; Restoring bookmarks
    (add-hook 'find-file-hooks   #'bm-buffer-restore)
    (add-hook 'after-revert-hook #'bm-buffer-restore)

    ;; The `after-revert-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state. This hook might cause trouble when using packages
    ;; that automatically reverts the buffer (like vc after a check-in).
    ;; This can easily be avoided if the package provides a hook that is
    ;; called before the buffer is reverted (like `vc-before-checkin-hook').
    ;; Then new bookmarks can be saved before the buffer is reverted.
    ;; Make sure bookmarks is saved before check-in (and revert-buffer)
    (add-hook 'vc-before-checkin-hook #'bm-buffer-save)


    ;; :bind (("<f2>" . bm-next)
    ;;        ("S-<f2>" . bm-previous)
    ;;        ("C-<f2>" . bm-toggle))
    )
  (require 'bm)
  (global-set-key (kbd "<f5>") 'bm-toggle)
  (global-set-key (kbd "<f6>") 'bm-previous)
  (global-set-key (kbd "<f7>") 'bm-next)
  (global-set-key (kbd "<f8>") 'bm-bookmark-regexp)
  #+END_SRC
* Some key-map changes
  #+BEGIN_SRC emacs-lisp
  ;; bind Alt-; to comment line
  (global-set-key "\M-;" 'comment-line)
  #+END_SRC
* Multiple cursor
  #+BEGIN_SRC emacs-lisp 
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-c m c") 'mc/edit-lines))
  #+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (progn
      (add-hook 'after-init-hook 'global-company-mode)
      (global-set-key (kbd "M-/") 'company-complete-common-or-cycle)
      (setq company-idle-delay 0)))
  #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    ;; Force flycheck to always use c++11 support. We use
    ;; the clang language backend so this is set to clang
    (add-hook 'c++-mode-hook
	      (lambda () (setq flycheck-clang-language-standard "c++11")))
    (progn global-flycheck-mode) )
  ;; Use flycheck-pyflakes for python. Seems to work a little better.
  (use-package flycheck-pyflakes
    :ensure t
    :config
    (progn global-flycheck-mode))
  #+END_SRC
* Irony
  #+BEGIN_SRC emacs-lisp
  ;; Irony server was never installed, install it.
  ;; (use-package irony
  ;;   :ensure t
  ;;   :config
  ;;   (progn
  ;;     (unless (irony--find-server-executable) (call-interactively #'irony-install-server))
  ;;     (add-hook 'c++-mode-hook 'irony-mode)
  ;;     (add-hook 'c-mode-hook 'irony-mode)

  ;;     ;; Use compilation database first, clang_complete as fallback.
  ;;     (setq-default irony-cdb-compilation-databases '(irony-cdb-libclang
  ;;                                                       irony-cdb-clang-complete))
  ;;     (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  ;;     ))
  #+END_SRC
* Company-irony
  Irony with company to get code completion.
  #+BEGIN_SRC emacs-lisp
  ;; (use-package company-irony
  ;;   :ensure t
  ;;   :config
  ;;   (progn
  ;;     (eval-after-load 'company '(add-to-list 'company-backends 'company-irony))))
  #+END_SRC
* RTags
  #+BEGIN_SRC emacs-lisp
  (use-package rtags
    :ensure t
    :config
    (progn
      (unless (rtags-executable-find "rc") (error "Binary rc is not installed!"))
      (unless (rtags-executable-find "rdm") (error "Binary rdm is not installed!"))
    
    
    
      (add-hook 'c-mode-hook 'rtags-start-process-unless-running)
      (add-hook 'c++-mode-hook 'rtags-start-process-unless-running)
      (add-hook 'objc-mode-hook 'rtags-start-process-unless-running)
    
      (define-key c-mode-base-map (kbd "M-[") 'rtags-location-stack-back)
      (define-key c-mode-base-map (kbd "M-.") 'rtags-find-symbol-at-point)
      (define-key c-mode-base-map (kbd "M-,") 'rtags-find-references-at-point)
      (define-key c-mode-base-map (kbd "M-?") 'rtags-display-summary)
      (define-key c-mode-base-map (kbd "M-?") 'rtags-display-summary)
    
      (rtags-enable-standard-keybindings)
    
      (setq rtags-use-helm t)

      ;; Shutdown rdm when leaving emacs.
      (add-hook 'kill-emacs-hook 'rtags-quit-rdm)
      ))

  ;; TODO: Has no coloring! How can I get coloring?
  (use-package helm-rtags
    :ensure t
    :config
    (progn
      (setq rtags-display-result-backend 'helm)
      ))

  ;; Use rtags for auto-completion.
  (use-package company-rtags
    :ensure t
    :config
    (progn
      (setq rtags-autostart-diagnostics t)
      (rtags-diagnostics)
      (setq rtags-completions-enabled t)
      (push 'company-rtags company-backends)
      ))

  ;; Live code checking.
  (use-package flycheck-rtags
    :ensure t
    :config
    (progn
      ;; ensure that we use only rtags checking
      ;; https://github.com/Andersbakken/rtags#optional-1
      (defun setup-flycheck-rtags ()
	(flycheck-select-checker 'rtags)
	(setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
	(setq-local flycheck-check-syntax-automatically nil)
	(rtags-set-periodic-reparse-timeout 2.0)  ;; Run flycheck 2 seconds after being idle.
	)
      (add-hook 'c-mode-hook #'setup-flycheck-rtags)
      (add-hook 'c++-mode-hook #'setup-flycheck-rtags)
      ))
  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (progn
      (projectile-global-mode)
      ))
  #+END_SRC
* Helm
  #+BEGIN_SRC emacs-lisp

  ;; Helm makes searching for anything nicer.
  ;; It works on top of many other commands / packages and gives them nice, flexible UI.
  (use-package helm
    :ensure t
    :config
    (progn
      (require 'helm-config)

      ;; Use C-c h instead of default C-x c, it makes more sense.
      (global-set-key (kbd "C-c h") 'helm-command-prefix)
      (global-unset-key (kbd "C-x c"))

      (setq
       ;; move to end or beginning of source when reaching top or bottom of source.
       helm-move-to-line-cycle-in-source t
       ;; search for library in `require' and `declare-function' sexp.
       helm-ff-search-library-in-sexp t
       ;; scroll 8 lines other window using M-<next>/M-<prior>
       helm-scroll-amount 8
       helm-ff-file-name-history-use-recentf t
       helm-echo-input-in-header-line t)

      (global-set-key (kbd "M-x") 'helm-M-x)
      (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

      (global-set-key (kbd "C-x C-f") 'helm-find-files)

      (global-set-key (kbd "M-y") 'helm-show-kill-ring)

      (global-set-key (kbd "C-x b") 'helm-mini)
      (setq helm-buffers-fuzzy-matching t
	    helm-recentf-fuzzy-match t)

      ;; TOOD: helm-semantic has not syntax coloring! How can I fix that?
      (setq helm-semantic-fuzzy-match t
	    helm-imenu-fuzzy-match t)

      ;; Lists all occurences of a pattern in buffer.
      (global-set-key (kbd "C-c h o") 'helm-occur)

      (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)

      ;; open helm buffer inside current window, not occupy whole other window
      (setq helm-split-window-in-side-p t)
      (setq helm-autoresize-max-height 50)
      (setq helm-autoresize-min-height 30)
      (helm-autoresize-mode 1)

      (helm-mode 1)
      ))

  ;; Use Helm in Projectile.
  (use-package helm-projectile
    :ensure t
    :config
    (progn
      (setq projectile-completion-system 'helm)
      (helm-projectile-on)
      ))


  #+END_SRC
* Type Y/N as oppposed to Yes/No
  #+BEGIN_SRC emacs-lisp
  ;; We don't want to type yes and no all the time so, do y and n
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC
* Disable #..# autosave files
  #+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
  #+END_SRC
* Fillcolumn indicator
  Nice coding etiquette to avoid those horendously long lines
  #+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :config
    (progn
      (define-globalized-minor-mode
	global-fci-mode fci-mode (lambda () (fci-mode 1)))
      (global-fci-mode) ))
  #+END_SRC
* Material theme (another theme, just trying out)
  #+BEGIN_SRC emacs-lisp
  ;; (use-package material-theme
  ;;   :ensure t
  ;;   :config( load-theme 'material t))
  #+END_SRC
* ELPY - Better python env
  #+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config( elpy-enable))
  (setq elpy-rpc-python-command "python3")
  #+END_SRC
* Monokail-alt theme
  #+BEGIN_SRC emacs-lisp
  (use-package monokai-alt-theme
    :ensure t
    :config (load-theme 'monokai-alt t))
  #+END_SRC
* Cursor type and color change
  #+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
  (set-cursor-color "#ffffff") 

  #+END_SRC
* Dired sub-tree
  #+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :ensure t
    :config
    (bind-keys :map dired-mode-map
	       ("i" . dired-subtree-insert)
	       (";" . dired-subtree-remove)))
  #+END_SRC
* python autopep8
  #+BEGIN_SRC emacs-lisp
  (use-package  py-autopep8
    :ensure t
    :init(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
    :config(setq py-autopep8-options '("--max-line-length=79")))

  #+END_SRC
